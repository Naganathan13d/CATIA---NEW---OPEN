// COPYRIGHT Dassault Systemes 2021
//===================================================================
//
// TRACommand10GSD.cpp
// The state chart based command: TRACommand10GSD
//
//===================================================================
//
// Usage notes:
//
//===================================================================
//
//  Jun 2021  Creation: Code generated by the CAA wizard  Dell
//===================================================================
#include "TRACommand10GSD.h"
#include "CATIndicationAgent.h"
#include "CATMathPlane.h"

#include "CATCreateExternalObject.h"

#include "CATDocument.h"
#include "CATDocumentServices.h"
#include "CATStateCommand.h"
#include "CATSession.h"
#include "CATIIniInteractiveSession.h"
#include "CATSessionServices.h"





CATCreateClass( TRACommand10GSD);


//-------------------------------------------------------------------------
// Constructor
//-------------------------------------------------------------------------
TRACommand10GSD::TRACommand10GSD() :
  CATStateCommand ("TRACommand10GSD", CATDlgEngOneShot, CATCommandModeExclusive) 
//  Valid states are CATDlgEngOneShot and CATDlgEngRepeat
  ,_Indication(NULL)
{
}

//-------------------------------------------------------------------------
// Destructor
//-------------------------------------------------------------------------
TRACommand10GSD::~TRACommand10GSD()
{
   if (_Indication != NULL) 
      _Indication->RequestDelayedDestruction();
}


//-------------------------------------------------------------------------
// BuildGraph()
//-------------------------------------------------------------------------
void TRACommand10GSD::BuildGraph()
{


  // TODO: Define the StateChart 
  // ---------------------------
  _Indication = new CATIndicationAgent ("Indication");
  CATMathPlane PlaneXY;
  _Indication -> SetMathPlane (PlaneXY);
  CATDialogState * initialState = GetInitialState("initialState");
  initialState -> AddDialogAgent (_Indication);
  
  AddTransition( initialState, NULL, 
                 IsOutputSetCondition (_Indication),
                 Action ((ActionMethod) &TRACommand10GSD::ActionOne));
}


//-------------------------------------------------------------------------
// ActionOne ()
//-------------------------------------------------------------------------
CATBoolean TRACommand10GSD::ActionOne( void *data )
{
  CATDocument * pDoc = NULL;

  HRESULT rc = CATDocumentServices::New("CATProduct", pDoc);

  if(!!pDoc)
  {

	  HRESULT rc = CATDocumentServices::SaveAs(*pDoc, "D:\\CAA\\CATIA Files\\TrainingProduct.CATProduct");

  }


  CATSession * pSession = NULL;

  rc = GetPtrSession(pSession);

  CATIIniInteractiveSession * pInteractiveSession = NULL;

  HRESULT rc1 = pSession->QueryInterface(IID_CATIIniInteractiveSession, (void**) &pInteractiveSession);

  CATIEditor * pEditor = NULL;

  HRESULT rc2 = pInteractiveSession->Open("D:\\CAA\\CATIA Files\\TrainingProduct.CATProduct", FALSE, &pEditor);


  return TRUE;

}

